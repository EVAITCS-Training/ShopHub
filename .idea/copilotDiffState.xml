<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/entities/CartItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/entities/CartItem.java" />
              <option name="originalContent" value="package com.evaitcsmatt.shoppinghub.console.entities;&#10;&#10;import java.util.Objects;&#10;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.GeneratedValue;&#10;import jakarta.persistence.GenerationType;&#10;import jakarta.persistence.Id;&#10;import jakarta.persistence.JoinColumn;&#10;import jakarta.persistence.ManyToOne;&#10;&#10;@Entity&#10;public class CartItem {&#10;&#9;@Id&#10;&#9;@GeneratedValue(strategy = GenerationType.IDENTITY)&#10;&#9;private int id;&#10;&#9;@ManyToOne&#10;&#9;@JoinColumn(name = &quot;product_id&quot;)&#10;&#9;private Product product;&#10;&#9;private int quantity;&#10;&#9;&#10;&#9;public CartItem() {}&#10;&#9;&#10;&#9;public CartItem(Product product, int quantity) {&#10;&#9;&#9;this.product = product;&#10;&#9;&#9;this.quantity = quantity;&#10;&#9;}&#10;&#10;&#9;public Product getProduct() {&#10;&#9;&#9;return product;&#10;&#9;}&#10;&#10;&#9;public void setProduct(Product product) {&#10;&#9;&#9;this.product = product;&#10;&#9;}&#10;&#10;&#9;public int getQuantity() {&#10;&#9;&#9;return quantity;&#10;&#9;}&#10;&#10;&#9;public void setQuantity(int quantity) {&#10;&#9;&#9;this.quantity = quantity;&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public int hashCode() {&#10;&#9;&#9;return Objects.hash(id, product, quantity);&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public boolean equals(Object obj) {&#10;&#9;&#9;if (this == obj)&#10;&#9;&#9;&#9;return true;&#10;&#9;&#9;if (obj == null)&#10;&#9;&#9;&#9;return false;&#10;&#9;&#9;if (getClass() != obj.getClass())&#10;&#9;&#9;&#9;return false;&#10;&#9;&#9;CartItem other = (CartItem) obj;&#10;&#9;&#9;return id == other.id &amp;&amp; Objects.equals(product, other.product) &amp;&amp; quantity == other.quantity;&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public String toString() {&#10;&#9;&#9;return &quot;CartItem [id=&quot; + id + &quot;, product=&quot; + product + &quot;, quantity=&quot; + quantity + &quot;]&quot;;&#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package com.evaitcsmatt.shoppinghub.console.entities;&#10;&#10;import java.util.Objects;&#10;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.GeneratedValue;&#10;import jakarta.persistence.GenerationType;&#10;import jakarta.persistence.Id;&#10;import jakarta.persistence.JoinColumn;&#10;import jakarta.persistence.ManyToOne;&#10;&#10;/**&#10; * Represents an item in the shopping cart, linking a product and its quantity.&#10; * This entity is persisted in the database.&#10; */&#10;@Entity&#10;public class CartItem {&#10;    /**&#10;     * Unique identifier for the cart item (auto-generated).&#10;     */&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private int id;&#10;    /**&#10;     * The product associated with this cart item.&#10;     */&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;product_id&quot;)&#10;    private Product product;&#10;    /**&#10;     * The quantity of the product in the cart.&#10;     */&#10;    private int quantity;&#10;&#10;    /**&#10;     * Default constructor for JPA.&#10;     */&#10;    public CartItem() {}&#10;&#10;    /**&#10;     * Constructs a cart item with a product and quantity.&#10;     * @param product the product&#10;     * @param quantity the quantity&#10;     */&#10;    public CartItem(Product product, int quantity) {&#10;        this.product = product;&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    /**&#10;     * Gets the product for this cart item.&#10;     * @return the product&#10;     */&#10;    public Product getProduct() {&#10;        return product;&#10;    }&#10;&#10;    /**&#10;     * Sets the product for this cart item.&#10;     * @param product the product&#10;     */&#10;    public void setProduct(Product product) {&#10;        this.product = product;&#10;    }&#10;&#10;    /**&#10;     * Gets the quantity for this cart item.&#10;     * @return the quantity&#10;     */&#10;    public int getQuantity() {&#10;        return quantity;&#10;    }&#10;&#10;    /**&#10;     * Sets the quantity for this cart item.&#10;     * @param quantity the quantity&#10;     */&#10;    public void setQuantity(int quantity) {&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(id, product, quantity);&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj)&#10;            return true;&#10;        if (obj == null)&#10;            return false;&#10;        if (getClass() != obj.getClass())&#10;            return false;&#10;        CartItem other = (CartItem) obj;&#10;        return id == other.id &amp;&amp; Objects.equals(product, other.product) &amp;&amp; quantity == other.quantity;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;CartItem [id=&quot; + id + &quot;, product=&quot; + product + &quot;, quantity=&quot; + quantity + &quot;]&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/entities/Order.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/entities/Order.java" />
              <option name="originalContent" value="package com.evaitcsmatt.shoppinghub.console.entities;&#10;&#10;import java.util.List;&#10;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.FetchType;&#10;import jakarta.persistence.GeneratedValue;&#10;import jakarta.persistence.GenerationType;&#10;import jakarta.persistence.Id;&#10;import jakarta.persistence.OneToMany;&#10;import jakarta.persistence.Table;&#10;&#10;@Entity&#10;@Table(name = &quot;sh_orders&quot;)&#10;public class Order {&#10;&#9;@Id&#10;&#9;@GeneratedValue(strategy = GenerationType.IDENTITY)&#10;&#9;private int id;&#10;&#9;&#10;&#9;@OneToMany(mappedBy = &quot;id&quot;, fetch = FetchType.EAGER)&#10;&#9;private List&lt;CartItem&gt; items;&#10;&#9;&#10;&#9;private double total;&#10;&#9;&#10;&#9;public Order() {}&#10;&#9;&#10;&#9;public Order(ShoppingCart cart) {&#10;&#9;&#9;this.items = cart.getCart();&#10;&#9;&#9;this.total = cart.getTotal();&#10;&#9;}&#10;&#10;&#9;public int getId() {&#10;&#9;&#9;return id;&#10;&#9;}&#10;&#10;&#9;public void setId(int id) {&#10;&#9;&#9;this.id = id;&#10;&#9;}&#10;&#10;&#9;public List&lt;CartItem&gt; getItems() {&#10;&#9;&#9;return items;&#10;&#9;}&#10;&#10;&#9;public void setItems(List&lt;CartItem&gt; items) {&#10;&#9;&#9;this.items = items;&#10;&#9;}&#10;&#10;&#9;public double getTotal() {&#10;&#9;&#9;return total;&#10;&#9;}&#10;&#10;&#9;public void setTotal(double total) {&#10;&#9;&#9;this.total = total;&#10;&#9;}&#10;&#9;&#10;}&#10;" />
              <option name="updatedContent" value="package com.evaitcsmatt.shoppinghub.console.entities;&#10;&#10;import java.util.List;&#10;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.FetchType;&#10;import jakarta.persistence.GeneratedValue;&#10;import jakarta.persistence.GenerationType;&#10;import jakarta.persistence.Id;&#10;import jakarta.persistence.OneToMany;&#10;import jakarta.persistence.Table;&#10;&#10;/**&#10; * Represents a customer order containing a list of cart items and the total price.&#10; * This entity is persisted in the database.&#10; */&#10;@Entity&#10;@Table(name = &quot;sh_orders&quot;)&#10;public class Order {&#10;    /**&#10;     * Unique identifier for the order (auto-generated).&#10;     */&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private int id;&#10;&#10;    /**&#10;     * The list of items in the order.&#10;     */&#10;    @OneToMany(mappedBy = &quot;id&quot;, fetch = FetchType.EAGER)&#10;    private List&lt;CartItem&gt; items;&#10;&#10;    /**&#10;     * The total price of the order.&#10;     */&#10;    private double total;&#10;&#10;    /**&#10;     * Default constructor for JPA.&#10;     */&#10;    public Order() {}&#10;&#10;    /**&#10;     * Constructs an order from a shopping cart.&#10;     * @param cart the shopping cart to convert to an order&#10;     */&#10;    public Order(ShoppingCart cart) {&#10;        this.items = cart.getCart();&#10;        this.total = cart.getTotal();&#10;    }&#10;&#10;    /**&#10;     * Gets the order ID.&#10;     * @return the order ID&#10;     */&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    /**&#10;     * Sets the order ID.&#10;     * @param id the order ID&#10;     */&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    /**&#10;     * Gets the list of items in the order.&#10;     * @return the list of cart items&#10;     */&#10;    public List&lt;CartItem&gt; getItems() {&#10;        return items;&#10;    }&#10;&#10;    /**&#10;     * Sets the list of items in the order.&#10;     * @param items the list of cart items&#10;     */&#10;    public void setItems(List&lt;CartItem&gt; items) {&#10;        this.items = items;&#10;    }&#10;&#10;    /**&#10;     * Gets the total price of the order.&#10;     * @return the total price&#10;     */&#10;    public double getTotal() {&#10;        return total;&#10;    }&#10;&#10;    /**&#10;     * Sets the total price of the order.&#10;     * @param total the total price&#10;     */&#10;    public void setTotal(double total) {&#10;        this.total = total;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/entities/Product.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/entities/Product.java" />
              <option name="originalContent" value="package com.evaitcsmatt.shoppinghub.console.entities;&#10;&#10;import java.io.Serializable;&#10;import java.util.Objects;&#10;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.GeneratedValue;&#10;import jakarta.persistence.GenerationType;&#10;import jakarta.persistence.Id;&#10;&#10;@Entity&#10;public class Product implements Serializable {&#10;&#9;@Id&#10;&#9;@GeneratedValue(strategy = GenerationType.IDENTITY)&#10;&#9;private int id;&#10;&#9;private String name;&#10;&#9;private double price;&#10;&#9;private int quantity;&#10;&#9;&#10;&#9;public Product() {}&#10;&#9;&#10;&#9;public Product(String name, double price) {&#10;&#9;&#9;this.name = name;&#10;&#9;&#9;this.price = price;&#10;&#9;&#9;this.quantity = 0;&#10;&#9;}&#10;&#9;&#10;&#9;public Product(String name, double price, int quantity) {&#10;&#9;&#9;this.name = name;&#10;&#9;&#9;this.price = price;&#10;&#9;&#9;this.quantity = quantity;&#10;&#9;}&#10;&#10;&#9;public int getId() {&#10;&#9;&#9;return id;&#10;&#9;}&#10;&#10;&#9;public void setId(int id) {&#10;&#9;&#9;this.id = id;&#10;&#9;}&#10;&#10;&#9;public String getName() {&#10;&#9;&#9;return name;&#10;&#9;}&#10;&#10;&#9;public void setName(String name) {&#10;&#9;&#9;this.name = name;&#10;&#9;}&#10;&#10;&#9;public double getPrice() {&#10;&#9;&#9;return price;&#10;&#9;}&#10;&#10;&#9;public void setPrice(double price) {&#10;&#9;&#9;this.price = price;&#10;&#9;}&#10;&#9;&#10;&#9;public int getQuantity() {&#10;&#9;&#9;return quantity;&#10;&#9;}&#10;&#9;&#10;&#9;public void setQuantity(int quantity) {&#10;&#9;&#9;this.quantity = quantity;&#10;&#9;}&#10;&#10;&#9;@Override&#10;    public int hashCode() {&#10;        return Objects.hash(name);&#10;    }&#10;&#10;&#9;@Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#10;        &#10;        Product product = (Product) obj;&#10;        &#10;        // Compare by name (or ID if available)&#10;        return Objects.equals(name, product.name);&#10;    }&#10;&#10;&#9;@Override&#10;&#9;public String toString() {&#10;&#9;&#9;return &quot;Product [id=&quot; + id + &quot;, name=&quot; + name + &quot;, price=&quot; + price + &quot;]&quot;;&#10;&#9;}&#10;&#9;&#10;&#9;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.evaitcsmatt.shoppinghub.console.entities;&#10;&#10;import java.io.Serializable;&#10;import java.util.Objects;&#10;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.GeneratedValue;&#10;import jakarta.persistence.GenerationType;&#10;import jakarta.persistence.Id;&#10;&#10;/**&#10; * Represents a product in the store with a name, price, and available quantity.&#10; * This entity is persisted in the database.&#10; */&#10;@Entity&#10;public class Product implements Serializable {&#10;    /**&#10;     * Unique identifier for the product (auto-generated).&#10;     */&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private int id;&#10;    /**&#10;     * Name of the product.&#10;     */&#10;    private String name;&#10;    /**&#10;     * Price of the product.&#10;     */&#10;    private double price;&#10;    /**&#10;     * Available quantity of the product in stock.&#10;     */&#10;    private int quantity;&#10;&#10;    /**&#10;     * Default constructor for JPA.&#10;     */&#10;    public Product() {}&#10;&#10;    /**&#10;     * Constructs a product with a name and price. Quantity defaults to 0.&#10;     * @param name the product name&#10;     * @param price the product price&#10;     */&#10;    public Product(String name, double price) {&#10;        this.name = name;&#10;        this.price = price;&#10;        this.quantity = 0;&#10;    }&#10;&#10;    /**&#10;     * Constructs a product with a name, price, and quantity.&#10;     * @param name the product name&#10;     * @param price the product price&#10;     * @param quantity the available quantity&#10;     */&#10;    public Product(String name, double price, int quantity) {&#10;        this.name = name;&#10;        this.price = price;&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    /**&#10;     * Gets the product ID.&#10;     * @return the product ID&#10;     */&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    /**&#10;     * Sets the product ID.&#10;     * @param id the product ID&#10;     */&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    /**&#10;     * Gets the product name.&#10;     * @return the product name&#10;     */&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    /**&#10;     * Sets the product name.&#10;     * @param name the product name&#10;     */&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    /**&#10;     * Gets the product price.&#10;     * @return the product price&#10;     */&#10;    public double getPrice() {&#10;        return price;&#10;    }&#10;&#10;    /**&#10;     * Sets the product price.&#10;     * @param price the product price&#10;     */&#10;    public void setPrice(double price) {&#10;        this.price = price;&#10;    }&#10;&#10;    /**&#10;     * Gets the available quantity of the product.&#10;     * @return the quantity&#10;     */&#10;    public int getQuantity() {&#10;        return quantity;&#10;    }&#10;&#10;    /**&#10;     * Sets the available quantity of the product.&#10;     * @param quantity the quantity&#10;     */&#10;    public void setQuantity(int quantity) {&#10;        this.quantity = quantity;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(name);&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#10;        Product product = (Product) obj;&#10;        // Compare by name (or ID if available)&#10;        return Objects.equals(name, product.name);&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Product [id=&quot; + id + &quot;, name=&quot; + name + &quot;, price=&quot; + price + &quot;]&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/entities/Store.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/entities/Store.java" />
              <option name="originalContent" value="package com.evaitcsmatt.shoppinghub.console.entities;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.Objects;&#10;&#10;public class Store {&#10;&#9;private Map&lt;Product, Integer&gt; products;&#10;&#9;&#10;&#9;public Store() {&#10;&#9;&#9;products = new HashMap&lt;&gt;();&#10;&#9;}&#10;&#9;&#10;&#9;public Store(Map&lt;Product, Integer&gt; products) {&#10;&#9;&#9;this.products = products;&#10;&#9;}&#10;&#9;&#10;&#9;public void addProduct(Product product, int quantity) {&#10;&#9;&#9;products.put(product, quantity);&#10;&#9;}&#10;&#9;&#10;&#9;public void displayProducts() {&#10;&#9;&#9;for (Product product : products.keySet()) {&#10;&#9;&#9;&#9;System.out.println(product.getName() + &quot;, &quot; + product.getPrice() + &quot;, &quot; + products.get(product));&#10;&#9;&#9;}&#10;&#9;}&#10;&#9;&#10;&#9;public Map&lt;Product, Integer&gt; getStoreInventory() {&#10;&#9;&#9;return products;&#10;&#9;}&#10;&#9;&#10;&#9;public boolean hasProduct(Product product) {&#10;&#9;&#9;return products.containsKey(product);&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public int hashCode() {&#10;&#9;&#9;return Objects.hash(products);&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public boolean equals(Object obj) {&#10;&#9;&#9;if (this == obj)&#10;&#9;&#9;&#9;return true;&#10;&#9;&#9;if (obj == null)&#10;&#9;&#9;&#9;return false;&#10;&#9;&#9;if (getClass() != obj.getClass())&#10;&#9;&#9;&#9;return false;&#10;&#9;&#9;Store other = (Store) obj;&#10;&#9;&#9;return Objects.equals(products, other.products);&#10;&#9;}&#10;&#10;&#9;@Override&#10;&#9;public String toString() {&#10;&#9;&#9;return &quot;Store [products=&quot; + products + &quot;]&quot;;&#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package com.evaitcsmatt.shoppinghub.console.entities;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.Objects;&#10;&#10;/**&#10; * Represents a store containing a collection of products and their available quantities.&#10; * Provides methods to add products, display inventory, and check product existence.&#10; */&#10;public class Store {&#10;    /**&#10;     * Map of products to their available quantities in the store.&#10;     */&#10;    private Map&lt;Product, Integer&gt; products;&#10;&#10;    /**&#10;     * Constructs an empty store with no products.&#10;     */&#10;    public Store() {&#10;        products = new HashMap&lt;&gt;();&#10;    }&#10;&#10;    /**&#10;     * Constructs a store with a predefined product inventory.&#10;     * @param products Map of products and their quantities&#10;     */&#10;    public Store(Map&lt;Product, Integer&gt; products) {&#10;        this.products = products;&#10;    }&#10;&#10;    /**&#10;     * Adds or updates a product in the store with the specified quantity.&#10;     * @param product the product to add or update&#10;     * @param quantity the quantity to set for the product&#10;     */&#10;    public void addProduct(Product product, int quantity) {&#10;        products.put(product, quantity);&#10;    }&#10;&#10;    /**&#10;     * Displays all products in the store with their name, price, and quantity.&#10;     */&#10;    public void displayProducts() {&#10;        for (Product product : products.keySet()) {&#10;            System.out.println(product.getName() + &quot;, &quot; + product.getPrice() + &quot;, &quot; + products.get(product));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Returns the store's inventory as a map of products to quantities.&#10;     * @return the inventory map&#10;     */&#10;    public Map&lt;Product, Integer&gt; getStoreInventory() {&#10;        return products;&#10;    }&#10;&#10;    /**&#10;     * Checks if the store contains the specified product.&#10;     * @param product the product to check&#10;     * @return true if the product exists in the store, false otherwise&#10;     */&#10;    public boolean hasProduct(Product product) {&#10;        return products.containsKey(product);&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(products);&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj)&#10;            return true;&#10;        if (obj == null)&#10;            return false;&#10;        if (getClass() != obj.getClass())&#10;            return false;&#10;        Store other = (Store) obj;&#10;        return Objects.equals(products, other.products);&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Store [products=&quot; + products + &quot;]&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/repository/ProductRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/repository/ProductRepository.java" />
              <option name="originalContent" value="package com.evaitcsmatt.shoppinghub.console.repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;import com.evaitcsmatt.shoppinghub.console.entities.Product;&#10;&#10;public interface ProductRepository extends JpaRepository&lt;Product, Integer&gt; {&#10;&#9;List&lt;Product&gt; findByNameLike(String name);&#10;}&#10;" />
              <option name="updatedContent" value="package com.evaitcsmatt.shoppinghub.console.repository;&#10;&#10;import java.util.List;&#10;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;import com.evaitcsmatt.shoppinghub.console.entities.Product;&#10;&#10;/**&#10; * Repository interface for Product entities.&#10; * Extends JpaRepository to provide CRUD operations and custom queries for Product.&#10; */&#10;public interface ProductRepository extends JpaRepository&lt;Product, Integer&gt; {&#10;    /**&#10;     * Finds products with names matching the given pattern (SQL LIKE syntax).&#10;     * @param name the pattern to match (e.g., &quot;%Apple%&quot;)&#10;     * @return list of matching products&#10;     */&#10;    List&lt;Product&gt; findByNameLike(String name);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/utils/DataInitializer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/shoppinghub.console/src/main/java/com/evaitcsmatt/shoppinghub/console/utils/DataInitializer.java" />
              <option name="originalContent" value="package com.evaitcsmatt.shoppinghub.console.utils;&#10;&#10;import java.util.List;&#10;&#10;import org.springframework.stereotype.Component;&#10;&#10;import com.evaitcsmatt.shoppinghub.console.entities.Product;&#10;import com.evaitcsmatt.shoppinghub.console.repository.ProductRepository;&#10;&#10;import jakarta.annotation.PostConstruct;&#10;import jakarta.transaction.Transactional;&#10;&#10;@Component&#10;@Transactional&#10;public class DataInitializer {&#10;&#9;&#10;&#9;private final ProductRepository productRepository;&#10;&#10;&#9;public DataInitializer(ProductRepository productRepository) {&#10;&#9;&#9;this.productRepository = productRepository;&#10;&#9;}&#10;&#9;&#10;&#9;&#10;&#9;@PostConstruct&#10;&#9;public void initializeData() {&#10;&#9;    List&lt;Product&gt; products = List.of(&#10;&#9;        // Fresh Produce&#10;&#9;        new Product(&quot;Red Apple&quot;, 0.79, 150),&#10;&#9;        new Product(&quot;Green Apple&quot;, 0.75, 120),&#10;&#9;        new Product(&quot;Granny Smith Apple&quot;, 0.82, 100),&#10;&#9;        new Product(&quot;Orange&quot;, 1.25, 80),&#10;&#9;        new Product(&quot;Banana&quot;, 0.65, 200),&#10;&#9;        new Product(&quot;Strawberries&quot;, 3.99, 45),&#10;&#9;        new Product(&quot;Blueberries&quot;, 4.50, 30),&#10;&#9;        new Product(&quot;Grapes&quot;, 2.89, 60),&#10;&#9;        new Product(&quot;Pineapple&quot;, 3.49, 25),&#10;&#9;        new Product(&quot;Mango&quot;, 1.99, 40),&#10;&#9;        new Product(&quot;Avocado&quot;, 1.49, 75),&#10;&#9;        new Product(&quot;Lemon&quot;, 0.89, 90),&#10;&#9;        new Product(&quot;Lime&quot;, 0.79, 85),&#10;&#9;        &#10;&#9;        // Vegetables&#10;&#9;        new Product(&quot;Carrot&quot;, 0.99, 110),&#10;&#9;        new Product(&quot;Broccoli&quot;, 2.49, 55),&#10;&#9;        new Product(&quot;Spinach&quot;, 2.99, 40),&#10;&#9;        new Product(&quot;Lettuce&quot;, 1.79, 65),&#10;&#9;        new Product(&quot;Tomato&quot;, 2.19, 95),&#10;&#9;        new Product(&quot;Cucumber&quot;, 1.39, 70),&#10;&#9;        new Product(&quot;Bell Pepper&quot;, 1.89, 80),&#10;&#9;        new Product(&quot;Onion&quot;, 1.29, 120),&#10;&#9;        new Product(&quot;Garlic&quot;, 4.99, 35),&#10;&#9;        new Product(&quot;Potato&quot;, 2.99, 200),&#10;&#9;        new Product(&quot;Sweet Potato&quot;, 1.99, 85),&#10;&#9;        &#10;&#9;        // Dairy &amp; Eggs&#10;&#9;        new Product(&quot;Milk (1 Gallon)&quot;, 3.79, 50),&#10;&#9;        new Product(&quot;Eggs (Dozen)&quot;, 2.49, 75),&#10;&#9;        new Product(&quot;Butter&quot;, 4.29, 40),&#10;&#9;        new Product(&quot;Cheese (Cheddar)&quot;, 5.99, 30),&#10;&#9;        new Product(&quot;Yogurt&quot;, 1.19, 60),&#10;&#9;        new Product(&quot;Cream Cheese&quot;, 2.99, 25),&#10;&#9;        new Product(&quot;Sour Cream&quot;, 2.49, 35),&#10;&#9;        &#10;&#9;        // Meat &amp; Seafood&#10;&#9;        new Product(&quot;Chicken Breast&quot;, 8.99, 45),&#10;&#9;        new Product(&quot;Ground Beef&quot;, 6.49, 55),&#10;&#9;        new Product(&quot;Salmon Fillet&quot;, 12.99, 20),&#10;&#9;        new Product(&quot;Bacon&quot;, 5.99, 40),&#10;&#9;        new Product(&quot;Ham&quot;, 7.49, 25),&#10;&#9;        new Product(&quot;Turkey Slices&quot;, 4.99, 30),&#10;&#9;        &#10;&#9;        // Pantry Staples&#10;&#9;        new Product(&quot;Bread (White)&quot;, 2.29, 80),&#10;&#9;        new Product(&quot;Bread (Wheat)&quot;, 2.49, 70),&#10;&#9;        new Product(&quot;Rice (5lb)&quot;, 4.99, 45),&#10;&#9;        new Product(&quot;Pasta&quot;, 1.29, 120),&#10;&#9;        new Product(&quot;Olive Oil&quot;, 6.99, 25),&#10;&#9;        new Product(&quot;Salt&quot;, 0.99, 100),&#10;&#9;        new Product(&quot;Black Pepper&quot;, 3.49, 40),&#10;&#9;        new Product(&quot;Sugar&quot;, 2.99, 60),&#10;&#9;        new Product(&quot;Flour&quot;, 3.29, 50),&#10;&#9;        new Product(&quot;Cereal (Cheerios)&quot;, 4.49, 35),&#10;&#9;        new Product(&quot;Oatmeal&quot;, 3.99, 45),&#10;&#9;        &#10;&#9;        // Beverages&#10;&#9;        new Product(&quot;Coffee (Ground)&quot;, 8.99, 40),&#10;&#9;        new Product(&quot;Tea Bags&quot;, 3.49, 55),&#10;&#9;        new Product(&quot;Orange Juice&quot;, 3.99, 30),&#10;&#9;        new Product(&quot;Soda (Coke)&quot;, 1.99, 100),&#10;&#9;        new Product(&quot;Water Bottle&quot;, 0.99, 200),&#10;&#9;        new Product(&quot;Energy Drink&quot;, 2.49, 85),&#10;&#9;        new Product(&quot;Beer (6-pack)&quot;, 7.99, 60),&#10;&#9;        new Product(&quot;Wine&quot;, 12.99, 25),&#10;&#9;        &#10;&#9;        // Snacks &amp; Sweets&#10;&#9;        new Product(&quot;Chocolate Bar&quot;, 1.49, 150),&#10;&#9;        new Product(&quot;Potato Chips&quot;, 2.99, 90),&#10;&#9;        new Product(&quot;Pretzels&quot;, 2.49, 70),&#10;&#9;        new Product(&quot;Cookies&quot;, 3.49, 80),&#10;&#9;        new Product(&quot;Ice Cream&quot;, 4.99, 35),&#10;&#9;        new Product(&quot;Candy (Gummy Bears)&quot;, 1.99, 120),&#10;&#9;        new Product(&quot;Nuts (Mixed)&quot;, 5.99, 40),&#10;&#9;        new Product(&quot;Granola Bar&quot;, 4.49, 65),&#10;&#9;        &#10;&#9;        // Household Items&#10;&#9;        new Product(&quot;Toilet Paper (12-pack)&quot;, 8.99, 40),&#10;&#9;        new Product(&quot;Paper Towels&quot;, 5.49, 55),&#10;&#9;        new Product(&quot;Dish Soap&quot;, 2.99, 75),&#10;&#9;        new Product(&quot;Laundry Detergent&quot;, 7.99, 30),&#10;&#9;        new Product(&quot;Trash Bags&quot;, 6.49, 45),&#10;&#9;        new Product(&quot;Light Bulb&quot;, 3.99, 60),&#10;&#9;        new Product(&quot;Batteries (AA)&quot;, 4.99, 80),&#10;&#9;        new Product(&quot;Aluminum Foil&quot;, 3.49, 50),&#10;&#9;        &#10;&#9;        // Personal Care&#10;&#9;        new Product(&quot;Shampoo&quot;, 5.99, 45),&#10;&#9;        new Product(&quot;Conditioner&quot;, 5.99, 40),&#10;&#9;        new Product(&quot;Body Wash&quot;, 4.49, 55),&#10;&#9;        new Product(&quot;Toothpaste&quot;, 2.99, 70),&#10;&#9;        new Product(&quot;Toothbrush&quot;, 1.99, 90),&#10;&#9;        new Product(&quot;Deodorant&quot;, 3.49, 65),&#10;&#9;        new Product(&quot;Soap Bar&quot;, 1.49, 100),&#10;&#9;        new Product(&quot;Lotion&quot;, 4.99, 50),&#10;&#9;        &#10;&#9;        // Electronics&#10;&#9;        new Product(&quot;Phone Charger&quot;, 19.99, 25),&#10;&#9;        new Product(&quot;Headphones&quot;, 29.99, 15),&#10;&#9;        new Product(&quot;USB Cable&quot;, 9.99, 35),&#10;&#9;        new Product(&quot;Power Bank&quot;, 24.99, 20),&#10;&#9;        new Product(&quot;Bluetooth Speaker&quot;, 49.99, 12),&#10;&#9;        new Product(&quot;Laptop Mouse&quot;, 15.99, 30),&#10;&#9;        new Product(&quot;Keyboard&quot;, 39.99, 18),&#10;&#9;        &#10;&#9;        // Books &amp; Media&#10;&#9;        new Product(&quot;Novel (Fiction)&quot;, 12.99, 40),&#10;&#9;        new Product(&quot;Cookbook&quot;, 19.99, 25),&#10;&#9;        new Product(&quot;Magazine&quot;, 4.99, 60),&#10;&#9;        new Product(&quot;DVD Movie&quot;, 9.99, 45),&#10;&#9;        new Product(&quot;Board Game&quot;, 24.99, 20),&#10;&#9;        new Product(&quot;Puzzle (1000pc)&quot;, 14.99, 30),&#10;&#9;        &#10;&#9;        // Clothing Basics&#10;&#9;        new Product(&quot;T-Shirt&quot;, 9.99, 75),&#10;&#9;        new Product(&quot;Jeans&quot;, 29.99, 40),&#10;&#9;        new Product(&quot;Socks (3-pack)&quot;, 7.99, 85),&#10;&#9;        new Product(&quot;Underwear (3-pack)&quot;, 12.99, 60),&#10;&#9;        new Product(&quot;Baseball Cap&quot;, 14.99, 35),&#10;&#9;        new Product(&quot;Hoodie&quot;, 24.99, 25),&#10;&#9;        &#10;&#9;        // Garden &amp; Outdoor&#10;&#9;        new Product(&quot;Plant (Pothos)&quot;, 8.99, 30),&#10;&#9;        new Product(&quot;Garden Hose&quot;, 19.99, 15),&#10;&#9;        new Product(&quot;Fertilizer&quot;, 12.99, 25),&#10;&#9;        new Product(&quot;Watering Can&quot;, 9.99, 20),&#10;&#9;        new Product(&quot;Garden Gloves&quot;, 5.99, 40),&#10;&#9;        &#10;&#9;        // Office Supplies&#10;&#9;        new Product(&quot;Pen (Blue)&quot;, 1.29, 200),&#10;&#9;        new Product(&quot;Pencil&quot;, 0.79, 150),&#10;&#9;        new Product(&quot;Notebook&quot;, 3.99, 80),&#10;&#9;        new Product(&quot;Stapler&quot;, 7.99, 25),&#10;&#9;        new Product(&quot;Paper (500 sheets)&quot;, 8.99, 35),&#10;&#9;        new Product(&quot;Folder&quot;, 2.49, 90),&#10;&#9;        new Product(&quot;Highlighter&quot;, 2.99, 70),&#10;&#9;        &#10;&#9;        // Seasonal/Special Items&#10;&#9;        new Product(&quot;Halloween Candy&quot;, 3.99, 100),&#10;&#9;        new Product(&quot;Christmas Lights&quot;, 12.99, 30),&#10;&#9;        new Product(&quot;Beach Towel&quot;, 19.99, 25),&#10;&#9;        new Product(&quot;Sunscreen&quot;, 8.99, 45),&#10;&#9;        new Product(&quot;Umbrella&quot;, 15.99, 20),&#10;&#9;        &#10;&#9;        // High-Value Items (for testing expensive purchases)&#10;&#9;        new Product(&quot;Laptop Computer&quot;, 799.99, 5),&#10;&#9;        new Product(&quot;Smart TV (55\&quot;)&quot;, 599.99, 3),&#10;&#9;        new Product(&quot;Gaming Console&quot;, 499.99, 8),&#10;&#9;        new Product(&quot;Smartphone&quot;, 699.99, 10),&#10;&#9;        new Product(&quot;Tablet&quot;, 329.99, 12),&#10;&#9;        new Product(&quot;Coffee Machine&quot;, 129.99, 15),&#10;&#9;        new Product(&quot;Vacuum Cleaner&quot;, 179.99, 8),&#10;&#9;        new Product(&quot;Air Fryer&quot;, 89.99, 20),&#10;&#9;        &#10;&#9;        // Zero/Low Stock Items (for testing out-of-stock scenarios)&#10;&#9;        new Product(&quot;Limited Edition Item&quot;, 99.99, 0),&#10;&#9;        new Product(&quot;Rare Collectible&quot;, 199.99, 1),&#10;&#9;        new Product(&quot;Flash Sale Item&quot;, 49.99, 2),&#10;&#9;        &#10;&#9;        // Bulk Items&#10;&#9;        new Product(&quot;Paper Plates (100ct)&quot;, 9.99, 25),&#10;&#9;        new Product(&quot;Plastic Cups (50ct)&quot;, 5.99, 40),&#10;&#9;        new Product(&quot;Napkins (200ct)&quot;, 3.99, 60),&#10;&#9;        &#10;&#9;        // International/Specialty Items&#10;&#9;        new Product(&quot;Sushi Nori&quot;, 4.99, 15),&#10;&#9;        new Product(&quot;Quinoa&quot;, 6.99, 30),&#10;&#9;        new Product(&quot;Coconut Oil&quot;, 8.99, 25),&#10;&#9;        new Product(&quot;Almond Milk&quot;, 3.49, 35),&#10;&#9;        new Product(&quot;Protein Powder&quot;, 29.99, 20),&#10;&#9;        new Product(&quot;Green Tea&quot;, 5.99, 40)&#10;&#9;    );&#10;&#9;    &#10;&#9;    productRepository.saveAll(products);&#10;&#9;    System.out.println(&quot;Data initialized with &quot; + products.size() + &quot; products&quot;);&#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package com.evaitcsmatt.shoppinghub.console.utils;&#10;&#10;import java.util.List;&#10;&#10;import org.springframework.stereotype.Component;&#10;&#10;import com.evaitcsmatt.shoppinghub.console.entities.Product;&#10;import com.evaitcsmatt.shoppinghub.console.repository.ProductRepository;&#10;&#10;import jakarta.annotation.PostConstruct;&#10;import jakarta.transaction.Transactional;&#10;&#10;/**&#10; * Component responsible for initializing the database with sample product data&#10; * when the application starts. This ensures the store has a variety of products&#10; * available for demonstration and testing purposes.&#10; */&#10;@Component&#10;@Transactional&#10;public class DataInitializer {&#10;    /**&#10;     * Repository for persisting and retrieving products.&#10;     */&#10;    private final ProductRepository productRepository;&#10;&#10;    /**&#10;     * Constructs a DataInitializer with the given product repository.&#10;     * @param productRepository the product repository&#10;     */&#10;    public DataInitializer(ProductRepository productRepository) {&#10;        this.productRepository = productRepository;&#10;    }&#10;&#10;    /**&#10;     * Populates the database with a predefined list of products after bean construction.&#10;     * This method is automatically called by Spring after the bean is initialized.&#10;     */&#10;    @PostConstruct&#10;    public void initializeData() {&#10;        List&lt;Product&gt; products = List.of(&#10;            // Fresh Produce&#10;            new Product(&quot;Red Apple&quot;, 0.79, 150),&#10;            new Product(&quot;Green Apple&quot;, 0.75, 120),&#10;            new Product(&quot;Granny Smith Apple&quot;, 0.82, 100),&#10;            new Product(&quot;Orange&quot;, 1.25, 80),&#10;            new Product(&quot;Banana&quot;, 0.65, 200),&#10;            new Product(&quot;Strawberries&quot;, 3.99, 45),&#10;            new Product(&quot;Blueberries&quot;, 4.50, 30),&#10;            new Product(&quot;Grapes&quot;, 2.89, 60),&#10;            new Product(&quot;Pineapple&quot;, 3.49, 25),&#10;            new Product(&quot;Mango&quot;, 1.99, 40),&#10;            new Product(&quot;Avocado&quot;, 1.49, 75),&#10;            new Product(&quot;Lemon&quot;, 0.89, 90),&#10;            new Product(&quot;Lime&quot;, 0.79, 85),&#10;            &#10;            // Vegetables&#10;            new Product(&quot;Carrot&quot;, 0.99, 110),&#10;            new Product(&quot;Broccoli&quot;, 2.49, 55),&#10;            new Product(&quot;Spinach&quot;, 2.99, 40),&#10;            new Product(&quot;Lettuce&quot;, 1.79, 65),&#10;            new Product(&quot;Tomato&quot;, 2.19, 95),&#10;            new Product(&quot;Cucumber&quot;, 1.39, 70),&#10;            new Product(&quot;Bell Pepper&quot;, 1.89, 80),&#10;            new Product(&quot;Onion&quot;, 1.29, 120),&#10;            new Product(&quot;Garlic&quot;, 4.99, 35),&#10;            new Product(&quot;Potato&quot;, 2.99, 200),&#10;            new Product(&quot;Sweet Potato&quot;, 1.99, 85),&#10;            &#10;            // Dairy &amp; Eggs&#10;            new Product(&quot;Milk (1 Gallon)&quot;, 3.79, 50),&#10;            new Product(&quot;Eggs (Dozen)&quot;, 2.49, 75),&#10;            new Product(&quot;Butter&quot;, 4.29, 40),&#10;            new Product(&quot;Cheese (Cheddar)&quot;, 5.99, 30),&#10;            new Product(&quot;Yogurt&quot;, 1.19, 60),&#10;            new Product(&quot;Cream Cheese&quot;, 2.99, 25),&#10;            new Product(&quot;Sour Cream&quot;, 2.49, 35),&#10;            &#10;            // Meat &amp; Seafood&#10;            new Product(&quot;Chicken Breast&quot;, 8.99, 45),&#10;            new Product(&quot;Ground Beef&quot;, 6.49, 55),&#10;            new Product(&quot;Salmon Fillet&quot;, 12.99, 20),&#10;            new Product(&quot;Bacon&quot;, 5.99, 40),&#10;            new Product(&quot;Ham&quot;, 7.49, 25),&#10;            new Product(&quot;Turkey Slices&quot;, 4.99, 30),&#10;            &#10;            // Pantry Staples&#10;            new Product(&quot;Bread (White)&quot;, 2.29, 80),&#10;            new Product(&quot;Bread (Wheat)&quot;, 2.49, 70),&#10;            new Product(&quot;Rice (5lb)&quot;, 4.99, 45),&#10;            new Product(&quot;Pasta&quot;, 1.29, 120),&#10;            new Product(&quot;Olive Oil&quot;, 6.99, 25),&#10;            new Product(&quot;Salt&quot;, 0.99, 100),&#10;            new Product(&quot;Black Pepper&quot;, 3.49, 40),&#10;            new Product(&quot;Sugar&quot;, 2.99, 60),&#10;            new Product(&quot;Flour&quot;, 3.29, 50),&#10;            new Product(&quot;Cereal (Cheerios)&quot;, 4.49, 35),&#10;            new Product(&quot;Oatmeal&quot;, 3.99, 45),&#10;            &#10;            // Beverages&#10;            new Product(&quot;Coffee (Ground)&quot;, 8.99, 40),&#10;            new Product(&quot;Tea Bags&quot;, 3.49, 55),&#10;            new Product(&quot;Orange Juice&quot;, 3.99, 30),&#10;            new Product(&quot;Soda (Coke)&quot;, 1.99, 100),&#10;            new Product(&quot;Water Bottle&quot;, 0.99, 200),&#10;            new Product(&quot;Energy Drink&quot;, 2.49, 85),&#10;            new Product(&quot;Beer (6-pack)&quot;, 7.99, 60),&#10;            new Product(&quot;Wine&quot;, 12.99, 25),&#10;            &#10;            // Snacks &amp; Sweets&#10;            new Product(&quot;Chocolate Bar&quot;, 1.49, 150),&#10;            new Product(&quot;Potato Chips&quot;, 2.99, 90),&#10;            new Product(&quot;Pretzels&quot;, 2.49, 70),&#10;            new Product(&quot;Cookies&quot;, 3.49, 80),&#10;            new Product(&quot;Ice Cream&quot;, 4.99, 35),&#10;            new Product(&quot;Candy (Gummy Bears)&quot;, 1.99, 120),&#10;            new Product(&quot;Nuts (Mixed)&quot;, 5.99, 40),&#10;            new Product(&quot;Granola Bar&quot;, 4.49, 65),&#10;            &#10;            // Household Items&#10;            new Product(&quot;Toilet Paper (12-pack)&quot;, 8.99, 40),&#10;            new Product(&quot;Paper Towels&quot;, 5.49, 55),&#10;            new Product(&quot;Dish Soap&quot;, 2.99, 75),&#10;            new Product(&quot;Laundry Detergent&quot;, 7.99, 30),&#10;            new Product(&quot;Trash Bags&quot;, 6.49, 45),&#10;            new Product(&quot;Light Bulb&quot;, 3.99, 60),&#10;            new Product(&quot;Batteries (AA)&quot;, 4.99, 80),&#10;            new Product(&quot;Aluminum Foil&quot;, 3.49, 50),&#10;            &#10;            // Personal Care&#10;            new Product(&quot;Shampoo&quot;, 5.99, 45),&#10;            new Product(&quot;Conditioner&quot;, 5.99, 40),&#10;            new Product(&quot;Body Wash&quot;, 4.49, 55),&#10;            new Product(&quot;Toothpaste&quot;, 2.99, 70),&#10;            new Product(&quot;Toothbrush&quot;, 1.99, 90),&#10;            new Product(&quot;Deodorant&quot;, 3.49, 65),&#10;            new Product(&quot;Soap Bar&quot;, 1.49, 100),&#10;            new Product(&quot;Lotion&quot;, 4.99, 50),&#10;            &#10;            // Electronics&#10;            new Product(&quot;Phone Charger&quot;, 19.99, 25),&#10;            new Product(&quot;Headphones&quot;, 29.99, 15),&#10;            new Product(&quot;USB Cable&quot;, 9.99, 35),&#10;            new Product(&quot;Power Bank&quot;, 24.99, 20),&#10;            new Product(&quot;Bluetooth Speaker&quot;, 49.99, 12),&#10;            new Product(&quot;Laptop Mouse&quot;, 15.99, 30),&#10;            new Product(&quot;Keyboard&quot;, 39.99, 18),&#10;            &#10;            // Books &amp; Media&#10;            new Product(&quot;Novel (Fiction)&quot;, 12.99, 40),&#10;            new Product(&quot;Cookbook&quot;, 19.99, 25),&#10;            new Product(&quot;Magazine&quot;, 4.99, 60),&#10;            new Product(&quot;DVD Movie&quot;, 9.99, 45),&#10;            new Product(&quot;Board Game&quot;, 24.99, 20),&#10;            new Product(&quot;Puzzle (1000pc)&quot;, 14.99, 30),&#10;            &#10;            // Clothing Basics&#10;            new Product(&quot;T-Shirt&quot;, 9.99, 75),&#10;            new Product(&quot;Jeans&quot;, 29.99, 40),&#10;            new Product(&quot;Socks (3-pack)&quot;, 7.99, 85),&#10;            new Product(&quot;Underwear (3-pack)&quot;, 12.99, 60),&#10;            new Product(&quot;Baseball Cap&quot;, 14.99, 35),&#10;            new Product(&quot;Hoodie&quot;, 24.99, 25),&#10;            &#10;            // Garden &amp; Outdoor&#10;            new Product(&quot;Plant (Pothos)&quot;, 8.99, 30),&#10;            new Product(&quot;Garden Hose&quot;, 19.99, 15),&#10;            new Product(&quot;Fertilizer&quot;, 12.99, 25),&#10;            new Product(&quot;Watering Can&quot;, 9.99, 20),&#10;            new Product(&quot;Garden Gloves&quot;, 5.99, 40),&#10;            &#10;            // Office Supplies&#10;            new Product(&quot;Pen (Blue)&quot;, 1.29, 200),&#10;            new Product(&quot;Pencil&quot;, 0.79, 150),&#10;            new Product(&quot;Notebook&quot;, 3.99, 80),&#10;            new Product(&quot;Stapler&quot;, 7.99, 25),&#10;            new Product(&quot;Paper (500 sheets)&quot;, 8.99, 35),&#10;            new Product(&quot;Folder&quot;, 2.49, 90),&#10;            new Product(&quot;Highlighter&quot;, 2.99, 70),&#10;            &#10;            // Seasonal/Special Items&#10;            new Product(&quot;Halloween Candy&quot;, 3.99, 100),&#10;            new Product(&quot;Christmas Lights&quot;, 12.99, 30),&#10;            new Product(&quot;Beach Towel&quot;, 19.99, 25),&#10;            new Product(&quot;Sunscreen&quot;, 8.99, 45),&#10;            new Product(&quot;Umbrella&quot;, 15.99, 20),&#10;            &#10;            // High-Value Items (for testing expensive purchases)&#10;            new Product(&quot;Laptop Computer&quot;, 799.99, 5),&#10;            new Product(&quot;Smart TV (55\&quot;)&quot;, 599.99, 3),&#10;            new Product(&quot;Gaming Console&quot;, 499.99, 8),&#10;            new Product(&quot;Smartphone&quot;, 699.99, 10),&#10;            new Product(&quot;Tablet&quot;, 329.99, 12),&#10;            new Product(&quot;Coffee Machine&quot;, 129.99, 15),&#10;            new Product(&quot;Vacuum Cleaner&quot;, 179.99, 8),&#10;            new Product(&quot;Air Fryer&quot;, 89.99, 20),&#10;            &#10;            // Zero/Low Stock Items (for testing out-of-stock scenarios)&#10;            new Product(&quot;Limited Edition Item&quot;, 99.99, 0),&#10;            new Product(&quot;Rare Collectible&quot;, 199.99, 1),&#10;            new Product(&quot;Flash Sale Item&quot;, 49.99, 2),&#10;            &#10;            // Bulk Items&#10;            new Product(&quot;Paper Plates (100ct)&quot;, 9.99, 25),&#10;            new Product(&quot;Plastic Cups (50ct)&quot;, 5.99, 40),&#10;            new Product(&quot;Napkins (200ct)&quot;, 3.99, 60),&#10;            &#10;            // International/Specialty Items&#10;            new Product(&quot;Sushi Nori&quot;, 4.99, 15),&#10;            new Product(&quot;Quinoa&quot;, 6.99, 30),&#10;            new Product(&quot;Coconut Oil&quot;, 8.99, 25),&#10;            new Product(&quot;Almond Milk&quot;, 3.49, 35),&#10;            new Product(&quot;Protein Powder&quot;, 29.99, 20),&#10;            new Product(&quot;Green Tea&quot;, 5.99, 40)&#10;        );&#10;        productRepository.saveAll(products);&#10;        System.out.println(&quot;Data initialized with &quot; + products.size() + &quot; products&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>